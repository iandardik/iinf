@article{ryan2019cln2inv,
  title   = {CLN2INV: learning loop invariants with continuous logic networks},
  author  = {Ryan, Gabriel and Wong, Justin and Yao, Jianan and Gu, Ronghui and Jana, Suman},
  journal = {arXiv preprint arXiv:1909.11542},
  year    = {2019}
}

@inproceedings{ma2019i4,
  title     = {I4: Incremental Inference of Inductive Invariants for Verification of Distributed Protocols},
  author    = {Ma, Haojun and Goel, Aman and Jeannin, Jean-Baptiste and Kapritsos, Manos and Kasikci, Baris and Sakallah, Karem A},
  booktitle = {Proceedings of the 27th ACM Symposium on Operating Systems Principles},
  pages     = {370--384},
  year      = {2019}
}

@article{padon2016decidability,
  title     = {Decidability of Inferring Inductive Invariants},
  author    = {Padon, Oded and Immerman, Neil and Shoham, Sharon and Karbyshev, Aleksandr and Sagiv, Mooly},
  journal   = {ACM SIGPLAN Notices},
  volume    = {51},
  number    = {1},
  pages     = {217--231},
  year      = {2016},
  publisher = {ACM New York, NY, USA}
}

@inproceedings{goel2020avr,
  title        = {AVR: Abstractly Verifying Reachability},
  author       = {Goel, Aman and Sakallah, Karem},
  booktitle    = {International Conference on Tools and Algorithms for the Construction and Analysis of Systems},
  pages        = {413--422},
  year         = {2020},
  organization = {Springer}
}

@inproceedings{bradley2012understanding,
  title        = {Understanding IC3},
  author       = {Bradley, Aaron R},
  booktitle    = {International Conference on Theory and Applications of Satisfiability Testing},
  pages        = {1--14},
  year         = {2012},
  organization = {Springer}
}

@inproceedings{feldman2019inferring,
  title        = {Inferring inductive invariants from phase structures},
  author       = {Feldman, Yotam MY and Wilcox, James R and Shoham, Sharon and Sagiv, Mooly},
  booktitle    = {International Conference on Computer Aided Verification},
  pages        = {405--425},
  year         = {2019},
  organization = {Springer}
}

@inproceedings{arons2001parameterized,
  title        = {Parameterized verification with automatically computed inductive assertions?},
  author       = {Arons, Tamarah and Pnueli, Amir and Ruah, Sitvanit and Xu, Ying and Zuck, Lenore},
  booktitle    = {International Conference on Computer Aided Verification},
  pages        = {221--234},
  year         = {2001},
  organization = {Springer}
}

@article{ernst2007daikon,
  title     = {The Daikon system for dynamic detection of likely invariants},
  author    = {Ernst, Michael D and Perkins, Jeff H and Guo, Philip J and McCamant, Stephen and Pacheco, Carlos and Tschantz, Matthew S and Xiao, Chen},
  journal   = {Science of computer programming},
  volume    = {69},
  number    = {1-3},
  pages     = {35--45},
  year      = {2007},
  publisher = {Elsevier}
}

@article{feldman2019complexity,
  title     = {Complexity and information in invariant inference},
  author    = {Feldman, Yotam MY and Immerman, Neil and Sagiv, Mooly and Shoham, Sharon},
  journal   = {Proceedings of the ACM on Programming Languages},
  volume    = {4},
  number    = {POPL},
  pages     = {1--29},
  year      = {2019},
  publisher = {ACM New York, NY, USA}
}

@article{feldman2021learning,
  title     = {Learning the boundary of inductive invariants},
  author    = {Feldman, Yotam MY and Sagiv, Mooly and Shoham, Sharon and Wilcox, James R},
  journal   = {Proceedings of the ACM on Programming Languages},
  volume    = {5},
  number    = {POPL},
  pages     = {1--30},
  year      = {2021},
  publisher = {ACM New York, NY, USA}
}


@inproceedings{LiuWahlLalCAV2019,
  author    = {Peizun Liu and Thomas Wahl and Akash Lal},
  title     = {Verifying Asynchronous Event-Driven Programs Using Partial Abstract Transformers},
  booktitle = {Computer Aided Verification (CAV)},
  year      = {2019}
}



@article{DBLP:journals/jcss/DolevHJKLRSW16,
  author    = {Danny Dolev and
               Keijo Heljanko and
               Matti J{\"{a}}rvisalo and
               Janne H. Korhonen and
               Christoph Lenzen and
               Joel Rybicki and
               Jukka Suomela and
               Siert Wieringa},
  title     = {Synchronous counting and computational algorithm design},
  journal   = {J. Comput. Syst. Sci.},
  volume    = {82},
  number    = {2},
  pages     = {310--332},
  year      = {2016},
  url       = {https://doi.org/10.1016/j.jcss.2015.09.002},
  doi       = {10.1016/j.jcss.2015.09.002},
  timestamp = {Tue, 16 Feb 2021 14:03:44 +0100},
  biburl    = {https://dblp.org/rec/journals/jcss/DolevHJKLRSW16.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@book{manna2012temporal,
  title     = {Temporal verification of reactive systems: safety},
  author    = {Manna, Zohar and Pnueli, Amir},
  year      = {2012},
  publisher = {Springer Science \& Business Media}
}

@inproceedings{somenzi2011ic3,
  title        = {IC3: where monolithic and incremental meet},
  author       = {Somenzi, Fabio and Bradley, Aaron R},
  booktitle    = {2011 Formal Methods in Computer-Aided Design (FMCAD)},
  pages        = {3--8},
  year         = {2011},
  organization = {IEEE}
}

@incollection{chaki2018bdd,
  title     = {BDD-based symbolic model checking},
  author    = {Chaki, Sagar and Gurfinkel, Arie},
  booktitle = {Handbook of Model Checking},
  pages     = {219--245},
  year      = {2018},
  publisher = {Springer}
}

@inbook{Biere2018,
  author    = {Biere, Armin
and Kr{\"o}ning, Daniel},
  editor    = {Clarke, Edmund M.
and Henzinger, Thomas A.
and Veith, Helmut
and Bloem, Roderick},
  title     = {SAT-Based Model Checking},
  booktitle = {Handbook of Model Checking},
  year      = {2018},
  publisher = {Springer International Publishing},
  address   = {Cham},
  pages     = {277--303},
  abstract  = {Modern satisfiability (SAT) solvers have become the enabling technology of many model checkers. In this chapter, we will focus on those techniques most relevant to industrial practice. In bounded model checking (BMC), a transition system and a property are jointly unwound for a given number k{\$}k{\$}of steps to obtain a formula that is satisfiable if there is a counterexample for the property up to length k{\$}k{\$}. The formula is then passed to an efficient SAT solver. The strength of BMC is refutation: BMC has been used to discover subtle flaws in digital systems. We cover the application of BMC to both hardware and software systems, and to hardware/software co-verification. We also discuss means to make BMC complete, including k{\$}k{\$}-induction, Craig interpolation, abstraction refinement techniques, and inductive techniques with iterative strengthening.},
  isbn      = {978-3-319-10575-8},
  doi       = {10.1007/978-3-319-10575-8_10},
  url       = {https://doi.org/10.1007/978-3-319-10575-8_10}
}

@inproceedings{bradley2007checking,
  title        = {Checking safety by inductive generalization of counterexamples to induction},
  author       = {Bradley, Aaron R and Manna, Zohar},
  booktitle    = {Formal Methods in Computer Aided Design (FMCAD'07)},
  pages        = {173--180},
  year         = {2007},
  organization = {IEEE}
}

@inproceedings{balaban2005iiv,
  title        = {IIV: An invisible invariant verifier},
  author       = {Balaban, Ittai and Fang, Yi and Pnueli, Amir and Zuck, Lenore D},
  booktitle    = {International Conference on Computer Aided Verification},
  pages        = {408--412},
  year         = {2005},
  organization = {Springer}
}

@inproceedings{garg2014ice,
  title        = {ICE: A robust framework for learning invariants},
  author       = {Garg, Pranav and L{\"o}ding, Christof and Madhusudan, P and Neider, Daniel},
  booktitle    = {International Conference on Computer Aided Verification},
  pages        = {69--87},
  year         = {2014},
  organization = {Springer}
}

@article{garg2016learning,
  title     = {Learning invariants using decision trees and implication counterexamples},
  author    = {Garg, Pranav and Neider, Daniel and Madhusudan, Parthasarathy and Roth, Dan},
  journal   = {ACM Sigplan Notices},
  volume    = {51},
  number    = {1},
  pages     = {499--512},
  year      = {2016},
  publisher = {ACM New York, NY, USA}
}

@article{sharma2016invariant,
  title     = {From invariant checking to invariant inference using randomized search},
  author    = {Sharma, Rahul and Aiken, Alex},
  journal   = {Formal Methods in System Design},
  volume    = {48},
  number    = {3},
  pages     = {235--256},
  year      = {2016},
  publisher = {Springer}
}

@InProceedings{aiken2014cav,
author="Sharma, Rahul
and Aiken, Alex",
editor="Biere, Armin
and Bloem, Roderick",
title="From Invariant Checking to Invariant Inference Using Randomized Search",
booktitle="Computer Aided Verification",
year="2014",
publisher="Springer International Publishing",
address="Cham",
pages="88--105",
abstract="We describe a general framework c2i for generating an invariant inference procedure from an invariant checking procedure. Given a checker and a language of possible invariants, c2i generates an inference procedure that iteratively invokes two phases. The search phase uses randomized search to discover candidate invariants and the validate phase uses the checker to either prove or refute that the candidate is an actual invariant. To demonstrate the applicability of c2i, we use it to generate inference procedures that prove safety properties of numerical programs, prove non-termination of numerical programs, prove functional specifications of array manipulating programs, prove safety properties of string manipulating programs, and prove functional specifications of heap manipulating programs that use linked list data structures.",
isbn="978-3-319-08867-9"
}

@inproceedings{fedyukovich2017sampling,
  title        = {Sampling invariants from frequency distributions},
  author       = {Fedyukovich, Grigory and Kaufman, Samuel J and Bod{\'\i}k, Rastislav},
  booktitle    = {2017 Formal Methods in Computer Aided Design (FMCAD)},
  pages        = {100--107},
  year         = {2017},
  organization = {IEEE}
}

@inproceedings{balaban2006invisible,
  title        = {Invisible safety of distributed protocols},
  author       = {Balaban, Ittai and Pnueli, Amir and Zuck, Lenore D},
  booktitle    = {International Colloquium on Automata, Languages, and Programming},
  pages        = {528--539},
  year         = {2006},
  organization = {Springer}
}

@article{cimatti2016infinite,
  title     = {Infinite-state invariant checking with IC3 and predicate abstraction},
  author    = {Cimatti, Alessandro and Griggio, Alberto and Mover, Sergio and Tonetta, Stefano},
  journal   = {Formal Methods in System Design},
  volume    = {49},
  number    = {3},
  pages     = {190--218},
  year      = {2016},
  publisher = {Springer}
}

@incollection{biere09,
  author    = {Armin Biere},
  editor    = {Armin Biere and
               Marijn Heule and
               Hans van Maaren and
               Toby Walsh},
  title     = {Bounded Model Checking},
  booktitle = {Handbook of Satisfiability},
  series    = {Frontiers in Artificial Intelligence and Applications},
  volume    = {185},
  pages     = {457--481},
  publisher = {{IOS} Press},
  year      = {2009},
  url       = {https://doi.org/10.3233/978-1-58603-929-5-457},
  doi       = {10.3233/978-1-58603-929-5-457},
  timestamp = {Mon, 16 Sep 2019 14:43:06 +0200},
  biburl    = {https://dblp.org/rec/series/faia/Biere09.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{clarke1981design,
  title        = {Design and synthesis of synchronization skeletons using branching time temporal logic},
  author       = {Clarke, Edmund M and Emerson, E Allen},
  booktitle    = {Workshop on Logic of Programs},
  pages        = {52--71},
  year         = {1981},
  organization = {Springer}
}

@article{burch1992symbolic,
  title     = {Symbolic model checking: 1020 states and beyond},
  author    = {Burch, Jerry R and Clarke, Edmund M and McMillan, Kenneth L and Dill, David L and Hwang, Lain-Jinn},
  journal   = {Information and computation},
  volume    = {98},
  number    = {2},
  pages     = {142--170},
  year      = {1992},
  publisher = {Elsevier}
}

@inproceedings{bradley2011sat,
  title        = {SAT-based model checking without unrolling},
  author       = {Bradley, Aaron R},
  booktitle    = {International Workshop on Verification, Model Checking, and Abstract Interpretation},
  pages        = {70--87},
  year         = {2011},
  organization = {Springer}
}

@inproceedings{McMillan_2002,
  title        = {Applying sat methods in unbounded symbolic model checking},
  isbn         = {9783540439974},
  issn         = {16113349},
  doi          = {10.1007/3-540-45657-0_19},
  abstractnote = {A method of symbolic model checking is introduced that uses conjunctive normal form (CNF) rather than binary decision diagrams (BDD’s) and uses a SAT-based approach to quantifier elimination. This method is compared to a traditional BDD-based model checking approach using a set of benchmark problems derived from the compositional verification of a commercial microprocessor design.},
  booktitle    = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  author       = {McMillan, Ken L.},
  year         = {2002}
}

@inproceedings{sheeran2000checking,
  title={Checking safety properties using induction and a SAT-solver},
  author={Sheeran, Mary and Singh, Satnam and St{\aa}lmarck, Gunnar},
  booktitle={International conference on formal methods in computer-aided design},
  pages={127--144},
  year={2000},
  organization={Springer}
}

@article{newcombe2014use,
  title={Use of formal methods at Amazon Web Services},
  author={Newcombe, Chris and Rath, Tim and Zhang, Fan and Munteanu, Bogdan and Brooker, Marc and Deardeuff, Michael},
  journal={See http://research. microsoft. com/en-us/um/people/lamport/tla/formal-methods-amazon. pdf},
  year={2014}
}

@inproceedings{braithwaite2020formal,
  title={Formal Specification and Model Checking of the Tendermint Blockchain Synchronization Protocol (Short Paper)},
  author={Braithwaite, Sean and Buchman, Ethan and Konnov, Igor and Milosevic, Zarko and Stoilkovska, Ilina and Widder, Josef and Zamfir, Anca},
  booktitle={2nd Workshop on Formal Methods for Blockchains (FMBC 2020)},
  year={2020},
  organization={Schloss Dagstuhl-Leibniz-Zentrum f{\"u}r Informatik}
}

@inproceedings{clarke2001progress,
  title={Progress on the state explosion problem in model checking},
  author={Clarke, Edmund and Grumberg, Orna and Jha, Somesh and Lu, Yuan and Veith, Helmut},
  booktitle={Informatics},
  pages={176--194},
  year={2001},
  organization={Springer}
}

@inproceedings{padon2016ivy,
  title={Ivy: safety verification by interactive generalization},
  author={Padon, Oded and McMillan, Kenneth L and Panda, Aurojit and Sagiv, Mooly and Shoham, Sharon},
  booktitle={Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages={614--630},
  year={2016}
}

@inproceedings{goel2021symmetry,
  title={{On Symmetry and Quantification: A New Approach to Verify Distributed Protocols}},
  author={Goel, Aman and Sakallah, Karem},
  booktitle={NASA Formal Methods Symposium},
  pages={131--150},
  year={2021},
  organization={Springer}
}

@inproceedings{de2008z3,
  title={Z3: An efficient SMT solver},
  author={De Moura, Leonardo and Bj{\o}rner, Nikolaj},
  booktitle={International conference on Tools and Algorithms for the Construction and Analysis of Systems},
  pages={337--340},
  year={2008},
  organization={Springer}
}

@article{flanagan2005dynamic,
  title={Dynamic partial-order reduction for model checking software},
  author={Flanagan, Cormac and Godefroid, Patrice},
  journal={ACM Sigplan Notices},
  volume={40},
  number={1},
  pages={110--121},
  year={2005},
  publisher={ACM New York, NY, USA}
}

@article{chalupa2017data,
  title={Data-centric dynamic partial order reduction},
  author={Chalupa, Marek and Chatterjee, Krishnendu and Pavlogiannis, Andreas and Sinha, Nishant and Vaidya, Kapil},
  journal={Proceedings of the ACM on Programming Languages},
  volume={2},
  number={POPL},
  pages={1--30},
  year={2017},
  publisher={ACM New York, NY, USA}
}
@inproceedings {hance2021finding,
author = {Travis Hance and Marijn Heule and Ruben Martins and Bryan Parno},
title = {Finding Invariants of Distributed Systems: It{\textquoteright}s a Small (Enough) World After All},
booktitle = {18th USENIX Symposium on Networked Systems Design and Implementation (NSDI 21)},
year = {2021},
isbn = {978-1-939133-21-2},
pages = {115--131},
url = {https://www.usenix.org/conference/nsdi21/presentation/hance},
publisher = {USENIX Association},
month = apr,
}
@inproceedings {yao2021distai,
author = {Jianan Yao and Runzhou Tao and Ronghui Gu and Jason Nieh and Suman Jana and Gabriel Ryan},
title = {{DistAI}: {Data-Driven} Automated Invariant Learning for Distributed Protocols},
booktitle = {15th USENIX Symposium on Operating Systems Design and Implementation (OSDI 21)},
year = {2021},
isbn = {978-1-939133-22-9},
pages = {405--421},
url = {https://www.usenix.org/conference/osdi21/presentation/yao},
publisher = {USENIX Association},
month = jul,
}
@inproceedings{koenig2020first,
  title={First-order quantified separators},
  author={Koenig, Jason R and Padon, Oded and Immerman, Neil and Aiken, Alex},
  booktitle={Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages={703--717},
  year={2020}
}
@inproceedings{woos2016planning,
  title={Planning for change in a formal verification of the Raft consensus protocol},
  author={Woos, Doug and Wilcox, James R and Anton, Steve and Tatlock, Zachary and Ernst, Michael D and Anderson, Thomas},
  booktitle={Proceedings of the 5th ACM SIGPLAN Conference on Certified Programs and Proofs},
  pages={154--165},
  year={2016}
}
@inproceedings{chand2016formal,
  title={Formal verification of multi-Paxos for distributed consensus},
  author={Chand, Saksham and Liu, Yanhong A and Stoller, Scott D},
  booktitle={International Symposium on Formal Methods},
  pages={119--136},
  year={2016},
  organization={Springer}
}
@misc{Lamport2018UsingTT,
  title={{Using TLC to Check Inductive Invariance}},
  author={Leslie Lamport},
  year={2018},
  url={http://lamport.azurewebsites.net/tla/inductive-invariant.pdf}
}
@Article{cousineau2012tla,
author = {Cousineau, Denis and Doligez, Damien and Lamport, Leslie and Merz, Stephan and Ricketts, Daniel and Vanzetto, Hernan},
title = {{TLA+ Proofs}},
year = {2012},
month = {January},
abstract = {This is a short paper describing TLAPS, the TLA+ proof system being developed at the Microsoft Research-INRIA Joint Centre.},
url = {https://www.microsoft.com/en-us/research/publication/tla-proofs/},
pages = {147-154},
journal = {Proceedings of the 18th International Symposium on Formal Methods (FM 2012), Dimitra Giannakopoulou and Dominique Mery, editors. Springer-Verlag Lecture Notes in Computer Science},
volume = {7436},
}
@article{Wernick1942CompleteSO,
  title={Complete sets of logical functions},
  author={William Wernick},
  journal={Transactions of the American Mathematical Society},
  year={1942},
  volume={51},
  pages={117-132}
}
@InProceedings{tlcmodelchecker,
author="Yu, Yuan
and Manolios, Panagiotis
and Lamport, Leslie",
editor="Pierre, Laurence
and Kropf, Thomas",
title={{Model Checking TLA+ Specifications}},
booktitle="Correct Hardware Design and Verification Methods",
year="1999",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="54--66",
abstract="TLA+ is a specification language for concurrent and reactive systems that combines the temporal logic TLA with full first-order logic and ZF set theory. TLC is a new model checker for debugging a TLA+ specification by checking invariance properties of a finite-state model of the specification. It accepts a subclass of TLA+ specifications that should include most descriptions of real system designs. It has been used by engineers to find errors in the cache coherence protocol for a new Compaq multiprocessor. We describe TLA+ specifications and their TLC models, how TLC works, and our experience using it.",
isbn="978-3-540-48153-9"
}
@book{lamport2002specifying,
  author = {Lamport, Leslie},
  month = {Jun},
  publisher = {Addison-Wesley},
  title = {{Specifying Systems: The TLA+ Language and Tools for Hardware and Software Engineers}},
  year = {2002}
}
@article{padonpaxosEPR,
author = {Padon, Oded and Losa, Giuliano and Sagiv, Mooly and Shoham, Sharon},
title = {{Paxos Made EPR: Decidable Reasoning about Distributed Protocols}},
year = {2017},
issue_date = {October 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {OOPSLA},
url = {https://doi.org/10.1145/3140568},
doi = {10.1145/3140568},
abstract = {Distributed protocols such as Paxos play an important role in many computer systems. Therefore, a bug in a distributed protocol may have tremendous effects. Accordingly, a lot of effort has been invested in verifying such protocols. However, checking invariants of such protocols is undecidable and hard in practice, as it requires reasoning about an unbounded number of nodes and messages. Moreover, protocol actions and invariants involve both quantifier alternations and higher-order concepts such as set cardinalities and arithmetic. This paper makes a step towards automatic verification of such protocols. We aim at a technique that can verify correct protocols and identify bugs in incorrect protocols. To this end, we develop a methodology for deductive verification based on effectively propositional logic (EPR)—a decidable fragment of first-order logic (also known as the Bernays-Sch\"{o}nfinkel-Ramsey class). In addition to decidability, EPR also enjoys the finite model property, allowing to display violations as finite structures which are intuitive for users. Our methodology involves modeling protocols using general (uninterpreted) first-order logic, and then systematically transforming the model to obtain a model and an inductive invariant that are decidable to check. The steps of the transformations are also mechanically checked, ensuring the soundness of the method. We have used our methodology to verify the safety of Paxos, and several of its variants, including Multi-Paxos, Vertical Paxos, Fast Paxos, Flexible Paxos and Stoppable Paxos. To the best of our knowledge, this work is the first to verify these protocols using a decidable logic, and the first formal verification of Vertical Paxos, Fast Paxos and Stoppable Paxos.},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {108},
numpages = {31},
keywords = {Paxos, effectively propositional logic, safety verification, distributed systems, inductive invariants, deductive verification}
}
@misc{padonpaxosEPRTR,
      title={{Paxos Made EPR: Decidable Reasoning about Distributed Protocols}}, 
      author={Oded Padon and Giuliano Losa and Mooly Sagiv and Sharon Shoham},
      year={2017},
      eprint={1710.07191},
      archivePrefix={arXiv},
      primaryClass={cs.PL}
}
@inproceedings{2020cockroachdb,
author = {Taft, Rebecca and Sharif, Irfan and Matei, Andrei and VanBenschoten, Nathan and Lewis, Jordan and Grieger, Tobias and Niemi, Kai and Woods, Andy and Birzin, Anne and Poss, Raphael and Bardea, Paul and Ranade, Amruta and Darnell, Ben and Gruneir, Bram and Jaffray, Justin and Zhang, Lucy and Mattis, Peter},
title = {CockroachDB: The Resilient Geo-Distributed SQL Database},
year = {2020},
isbn = {9781450367356},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3318464.3386134},
doi = {10.1145/3318464.3386134},
abstract = {We live in an increasingly interconnected world, with many organizations operating across countries or even continents. To serve their global user base, organizations are replacing their legacy DBMSs with cloud-based systems capable of scaling OLTP workloads to millions of users. CockroachDB is a scalable SQL DBMS that was built from the ground up to support these global OLTP workloads while maintaining high availability and strong consistency. Just like its namesake, CockroachDB is resilient to disasters through replication and automatic recovery mechanisms. This paper presents the design of CockroachDB and its novel transaction model that supports consistent geo-distributed transactions on commodity hardware. We describe how CockroachDB replicates and distributes data to achieve fault tolerance and high performance, as well as how its distributed SQL layer automatically scales with the size of the database cluster while providing the standard SQL interface that users expect. Finally, we present a comprehensive performance evaluation and share a couple of case studies of CockroachDB users. We conclude by describing lessons learned while building CockroachDB over the last five years.},
booktitle = {Proceedings of the 2020 ACM SIGMOD International Conference on Management of Data},
pages = {1493–1509},
numpages = {17},
location = {Portland, OR, USA},
series = {SIGMOD '20}
}
@inproceedings{2021awsfms3,
author = {Bornholt, James and Joshi, Rajeev and Astrauskas, Vytautas and Cully, Brendan and Kragl, Bernhard and Markle, Seth and Sauri, Kyle and Schleit, Drew and Slatton, Grant and Tasiran, Serdar and Van Geffen, Jacob and Warfield, Andrew},
title = {Using Lightweight Formal Methods to Validate a Key-Value Storage Node in Amazon S3},
year = {2021},
isbn = {9781450387095},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3477132.3483540},
doi = {10.1145/3477132.3483540},
abstract = {This paper reports our experience applying lightweight formal methods to validate the correctness of ShardStore, a new key-value storage node implementation for the Amazon S3 cloud object storage service. By "lightweight formal methods" we mean a pragmatic approach to verifying the correctness of a production storage node that is under ongoing feature development by a full-time engineering team. We do not aim to achieve full formal verification, but instead emphasize automation, usability, and the ability to continually ensure correctness as both software and its specification evolve over time. Our approach decomposes correctness into independent properties, each checked by the most appropriate tool, and develops executable reference models as specifications to be checked against the implementation. Our work has prevented 16 issues from reaching production, including subtle crash consistency and concurrency problems, and has been extended by non-formal-methods experts to check new features and properties as ShardStore has evolved.},
booktitle = {Proceedings of the ACM SIGOPS 28th Symposium on Operating Systems Principles},
pages = {836–850},
numpages = {15},
keywords = {cloud storage, lightweight formal methods},
location = {Virtual Event, Germany},
series = {SOSP '21}
}
@inproceedings{paxosmadelive,
author = {Chandra, Tushar D. and Griesemer, Robert and Redstone, Joshua},
title = {Paxos Made Live: An Engineering Perspective},
year = {2007},
isbn = {9781595936165},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1281100.1281103},
doi = {10.1145/1281100.1281103},
abstract = {We describe our experience in building a fault-tolerant data-base using the Paxos consensus algorithm. Despite the existing literature in the field, building such a database proved to be non-trivial. We describe selected algorithmic and engineering problems encountered, and the solutions we found for them. Our measurements indicate that we have built a competitive system.},
booktitle = {Proceedings of the Twenty-Sixth Annual ACM Symposium on Principles of Distributed Computing},
pages = {398–407},
numpages = {10},
keywords = {implementation, fault-tolerance, experiences, Paxos},
location = {Portland, Oregon, USA},
series = {PODC '07}
}
@inproceedings{biereBMC,
author = {Biere, Armin and Cimatti, Alessandro and Clarke, Edmund and Strichman, Ofer and Zhu, Yunshan},
year = {2003},
month = {12},
pages = {117 - 148},
title = {{Bounded Model Checking}},
volume = {58},
isbn = {9780120121588},
journal = {Advances in Computers},
doi = {10.1016/S0065-2458(03)58003-2}
}
@article{holzmann1997model,
  title={{The model checker SPIN}},
  author={Holzmann, Gerard J.},
  journal={IEEE Transactions on software engineering},
  volume={23},
  number={5},
  pages={279--295},
  year={1997},
  publisher={IEEE}
}
@InProceedings{aronsparamver,
author="Arons, Tamarah
and Pnueli, Amir
and Ruah, Sitvanit
and Xu, Ying
and Zuck, Lenore",
editor="Berry, G{\'e}rard
and Comon, Hubert
and Finkel, Alain",
title="Parameterized Verification with Automatically Computed Inductive Assertions?",
booktitle="Computer Aided Verification",
year="2001",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="221--234",
abstract="The paper presents a method, called the method of verification by invisible invariants, for the automatic verification of a large class of parameterized systems. The method is based on the automatic calculation of candidate inductive assertions and checking for their inductiveness, using symbolic model-checking techniques for both tasks. First, we show how to use model-checking techniques over finite (and small) instances of the parameterized system in order to derive candidates for invariant assertions. Next, we show that the premises of the standard deductive INV rule for proving invariance properties can be automatically resolved by finite-state (BDD-based) methods with no need for interactive theorem proving. Combining the automatic computation of invariants with the automatic resolution of the VCs (verification conditions) yields a (necessarily) incomplete but fully automatic sound method for verifying large classes of parameterized systems. The generated invariants can be transferred to the VC-validation phase without ever been examined by the user, which explains why we refer to them as ``invisible''. The efficacy of the method is demonstrated by automatic verification of diverse parameterized systems in a fully automatic and efficient manner.",
isbn="978-3-540-44585-2"
}
@inproceedings{Ma2019,
abstract = {Designing and implementing distributed systems correctly is a very challenging task. Recently, formal verification has been successfully used to prove the correctness of distributed systems. At the heart of formal verification lies a computer-checked proof with an inductive invariant. Finding this inductive invariant, however, is the most difficult part of the proof. Alas, current proof techniques require inductive invariants to be found manually—and painstakingly—by the developer. In this paper, we present a new approach, Incremental Inference of Inductive Invariants (I4), to automatically generate inductive invariants for distributed protocols. The essence of our idea is simple: the inductive invariant of a finite instance of the protocol can be used to infer a general inductive invariant for the infinite distributed protocol. In I4, we create a finite instance of the protocol; use a model checking tool to automatically derive the inductive invariant for this finite instance; and generalize this invariant to an inductive invariant for the infinite protocol. Our experiments show that I4 can prove the correctness of several distributed protocols like Chord, 2PC and Transaction Chains with little to no human effort.},
author = {Ma, Haojun and Goel, Aman and Jeannin, Jean Baptiste and Kapritsos, Manos and Kasikci, Baris and Sakallah, Karem A.},
booktitle = {SOSP 2019 - Proceedings of the 27th ACM Symposium on Operating Systems Principles},
doi = {10.1145/3341301.3359651},
isbn = {9781450368735},
title = {{I4: Incremental inference of inductive invariants for verification of distributed protocols}},
year = {2019}
}
@inproceedings{raftpaper,
abstract = {Raft is a consensus algorithm for managing a replicated log. It produces a result equivalent to (multi-)Paxos, and it is as efficient as Paxos, but its structure is different from Paxos; this makes Raft more understandable than Paxos and also provides a better foundation for building practical systems. In order to enhance understandability, Raft separates the key elements of consensus, such as leader election, log replication, and safety, and it enforces a stronger degree of coherency to reduce the number of states that must be considered. Results from a user study demonstrate that Raft is easier for students to learn than Paxos. Raft also includes a new mechanism for changing the cluster membership, which uses overlapping majorities to guarantee safety.},
address = {USA},
author = {Ongaro, Diego and Ousterhout, John},
booktitle = {Proceedings of the 2014 USENIX Conference on USENIX Annual Technical Conference},
isbn = {9781931971102},
keywords = {Distributed Systems},
mendeley-tags = {Distributed Systems},
pages = {305--320},
publisher = {USENIX Association},
series = {USENIX ATC'14},
title = {{In Search of an Understandable Consensus Algorithm}},
year = {2014}
}
@InProceedings{clarke94finitestateverification,
author="Clarke, E.
and Grumberg, O.
and Long, D.",
editor="de Bakker, J. W.
and de Roever, W. -P.
and Rozenberg, G.",
title="Verification tools for finite-state concurrent systems",
booktitle="A Decade of Concurrency Reflections and Perspectives",
year="1994",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="124--175",
isbn="978-3-540-48423-3"
}
@article{bloem2015decidability,
  title={Decidability of parameterized verification},
  author={Bloem, Roderick and Jacobs, Swen and Khalimov, Ayrat and Konnov, Igor and Rubin, Sasha and Veith, Helmut and Widder, Josef},
  journal={Synthesis Lectures on Distributed Computing Theory},
  volume={6},
  number={1},
  pages={1--170},
  year={2015},
  publisher={Morgan \& Claypool Publishers}
}
@article{paxosmadeepr,
author = {Padon, Oded and Losa, Giuliano and Sagiv, Mooly and Shoham, Sharon},
title = {Paxos Made EPR: Decidable Reasoning about Distributed Protocols},
year = {2017},
issue_date = {October 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {OOPSLA},
url = {https://doi.org/10.1145/3140568},
doi = {10.1145/3140568},
abstract = {Distributed protocols such as Paxos play an important role in many computer systems. Therefore, a bug in a distributed protocol may have tremendous effects. Accordingly, a lot of effort has been invested in verifying such protocols. However, checking invariants of such protocols is undecidable and hard in practice, as it requires reasoning about an unbounded number of nodes and messages. Moreover, protocol actions and invariants involve both quantifier alternations and higher-order concepts such as set cardinalities and arithmetic. This paper makes a step towards automatic verification of such protocols. We aim at a technique that can verify correct protocols and identify bugs in incorrect protocols. To this end, we develop a methodology for deductive verification based on effectively propositional logic (EPR)—a decidable fragment of first-order logic (also known as the Bernays-Sch\"{o}nfinkel-Ramsey class). In addition to decidability, EPR also enjoys the finite model property, allowing to display violations as finite structures which are intuitive for users. Our methodology involves modeling protocols using general (uninterpreted) first-order logic, and then systematically transforming the model to obtain a model and an inductive invariant that are decidable to check. The steps of the transformations are also mechanically checked, ensuring the soundness of the method. We have used our methodology to verify the safety of Paxos, and several of its variants, including Multi-Paxos, Vertical Paxos, Fast Paxos, Flexible Paxos and Stoppable Paxos. To the best of our knowledge, this work is the first to verify these protocols using a decidable logic, and the first formal verification of Vertical Paxos, Fast Paxos and Stoppable Paxos.},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {108},
numpages = {31},
keywords = {effectively propositional logic, distributed systems, inductive invariants, Paxos, safety verification, deductive verification}
}
@article{Goel2021TowardsAA,
  title={Towards an Automatic Proof of Lamport’s Paxos},
  author={Aman Goel and Karem A. Sakallah},
  journal={2021 Formal Methods in Computer Aided Design (FMCAD)},
  year={2021},
  pages={112-122}
}
@book{softwareabstractions,
  author    = {Daniel Jackson},
  title     = {Software Abstractions - Logic, Language, and Analysis},
  publisher = {MIT Press},
  year      = {2006},
  isbn      = {978-0-262-10114-1},
  pages     = {I-XVI, 1-350},
}
@InProceedings{schultz2021design,
  author =	{William Schultz and Siyuan Zhou and Ian Dardik and Stavros Tripakis},
  title =	{{Design and Analysis of a Logless Dynamic Reconfiguration Protocol}},
  booktitle =	{25th International Conference on Principles of Distributed Systems (OPODIS 2021)},
  series =	{Leibniz International Proceedings in Informatics (LIPIcs)},
  year =	{2022},
  volume =	{217},
  editor =	{Quentin Bramas and Vincent Gramoli and Alessia Milani},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  annote =	{Keywords: Fault Tolerance, Dynamic Reconfiguration, State Machine Replication},
}
@inproceedings{schultz2021formal,
author = {Schultz, William and Dardik, Ian and Tripakis, Stavros},
title = {{Formal Verification of a Distributed Dynamic Reconfiguration Protocol}},
year = {2022},
isbn = {9781450391825},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3497775.3503688},
doi = {10.1145/3497775.3503688},
abstract = {We present a formal, machine checked TLA+ safety proof of MongoRaftReconfig, a distributed dynamic reconfiguration protocol. MongoRaftReconfig was designed for and implemented in MongoDB, a distributed database whose replication protocol is derived from the Raft consensus algorithm. We present an inductive invariant for MongoRaftReconfig that is formalized in TLA+ and formally proved using the TLA+ proof system (TLAPS). We also present a formal TLAPS proof of two key safety properties of MongoRaftReconfig, LeaderCompleteness and StateMachineSafety. To our knowledge, these are the first machine checked inductive invariant and safety proof of a dynamic reconfiguration protocol for a Raft based replication system.},
booktitle = {Proceedings of the 11th ACM SIGPLAN International Conference on Certified Programs and Proofs},
pages = {143–152},
numpages = {10},
keywords = {Dynamic Reconfiguration, Distributed Systems, Theorem Proving, Raft, TLA+, Formal Verification},
location = {Philadelphia, PA, USA},
series = {CPP 2022}
}
@inproceedings{pastryformalverif,
author = {Lu, Tianxiang},
title = {Formal Verification of the Pastry Protocol Using TLA+},
year = {2015},
isbn = {9783319259413},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-319-25942-0_19},
doi = {10.1007/978-3-319-25942-0_19},
booktitle = {Proceedings of the First International Symposium on Dependable Software Engineering: Theories, Tools, and Applications - Volume 9409},
pages = {284–299},
numpages = {16},
keywords = {Network protocols, Formal verification, Interactive theorem proving},
location = {Nanjing, China},
series = {SETTA 2015}
}
@inproceedings{clarke2000counterexample,
  title={Counterexample-guided abstraction refinement},
  author={Clarke, Edmund and Grumberg, Orna and Jha, Somesh and Lu, Yuan and Veith, Helmut},
  booktitle={International Conference on Computer Aided Verification},
  pages={154--169},
  year={2000},
  organization={Springer}
}
@InProceedings{Fedyukovichsyguinvs,
author="Fedyukovich, Grigory
and Prabhu, Sumanth
and Madhukar, Kumar
and Gupta, Aarti",
editor="Dillig, Isil
and Tasiran, Serdar",
title="Quantified Invariants via Syntax-Guided Synthesis",
booktitle="Computer Aided Verification",
year="2019",
publisher="Springer International Publishing",
address="Cham",
pages="259--277",
abstract="Programs with arrays are ubiquitous. Automated reasoning about arrays necessitates discovering properties about ranges of elements at certain program points. Such properties are formally specified by universally quantified formulas, which are difficult to find, and difficult to prove inductive. In this paper, we propose an algorithm based on an enumerative search that discovers quantified invariants in stages. First, by exploiting the program syntax, it identifies ranges of elements accessed in each loop. Second, it identifies potentially useful facts about individual elements and generalizes them to hypotheses about entire ranges. Finally, by applying recent advances of SMT solving, the algorithm filters out wrong hypotheses. The combination of properties is often enough to prove that the program meets a safety specification. The algorithm has been implemented in a solver for Constrained Horn Clauses, Freq-Horn, and extended to deal with multiple (possibly nested) loops. We show that FreqHorn advances state-of-the-art on a wide range of public array-handling programs.",
isbn="978-3-030-25540-4"
}
@inproceedings{houdiniflanagan,
author = {Flanagan, Cormac and Leino, K. Rustan M.},
title = {Houdini, an Annotation Assistant for ESC/Java},
year = {2001},
isbn = {3540417915},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
booktitle = {Proceedings of the International Symposium of Formal Methods Europe on Formal Methods for Increasing Software Productivity},
pages = {500–517},
numpages = {18},
series = {FME '01}
}
@InProceedings{FedyukovichAccelerating,
author="Fedyukovich, Grigory
and Bod{\'i}k, Rastislav",
editor="Beyer, Dirk
and Huisman, Marieke",
title="Accelerating Syntax-Guided Invariant Synthesis",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="251--269",
abstract="We present a fast algorithm for syntax-guided synthesis of inductive invariants which combines enumerative learning with inductive-subset extraction, leverages counterexamples-to-induction and interpolation-based bounded proofs. It is a variant of a recently proposed probabilistic method, called FreqHorn, which is however less dependent on heuristics than its predecessor. We present an evaluation of the new algorithm on a large set of benchmarks and show that it exhibits a more predictable behavior than its predecessor, and it is competitive to the state-of-the-art invariant synthesizers based on Property Directed Reachability.",
isbn="978-3-319-89960-2"
}
@article{chib1995understanding,
  title={Understanding the metropolis-hastings algorithm},
  author={Chib, Siddhartha and Greenberg, Edward},
  journal={The american statistician},
  volume={49},
  number={4},
  pages={327--335},
  year={1995},
  publisher={Taylor \& Francis}
}
@InProceedings{2020formalspec_tendermint,
  author =	{Sean Braithwaite and Ethan Buchman and Igor Konnov and Zarko Milosevic and Ilina Stoilkovska and Josef Widder and Anca Zamfir},
  title =	{{Formal Specification and Model Checking of the Tendermint Blockchain Synchronization Protocol (Short Paper)}},
  booktitle =	{2nd Workshop on Formal Methods for Blockchains (FMBC 2020)},
  pages =	{10:1--10:8},
  series =	{OpenAccess Series in Informatics (OASIcs)},
  ISBN =	{978-3-95977-169-6},
  ISSN =	{2190-6807},
  year =	{2020},
  volume =	{84},
  editor =	{Bruno Bernardo and Diego Marmsoler},
  publisher =	{Schloss Dagstuhl--Leibniz-Zentrum f{\"u}r Informatik},
  address =	{Dagstuhl, Germany},
  URL =		{https://drops.dagstuhl.de/opus/volltexte/2020/13423},
  URN =		{urn:nbn:de:0030-drops-134238},
  doi =		{10.4230/OASIcs.FMBC.2020.10},
  annote =	{Keywords: Blockchain, Fault Tolerance, Byzantine Faults, Model Checking}
}
@inproceedings{2011pdr,
author = {Een, Niklas and Mishchenko, Alan and Brayton, Robert},
title = {Efficient Implementation of Property Directed Reachability},
year = {2011},
isbn = {9780983567813},
publisher = {FMCAD Inc},
address = {Austin, Texas},
abstract = {Last spring, in March 2010, Aaron Bradley published the first truly new bit-level symbolic model checking algorithm since Ken McMillan's interpolation based model checking procedure introduced in 2003. Our experience with the algorithm suggests that it is stronger than interpolation on industrial problems, and that it is an important algorithm to study further. In this paper, we present a simplified and faster implementation of Bradley's procedure, and discuss our successful and unsuccessful attempts to improve it.},
booktitle = {Proceedings of the International Conference on Formal Methods in Computer-Aided Design},
pages = {125–134},
numpages = {10},
location = {Austin, Texas},
series = {FMCAD '11}
}
@InProceedings{eprmoura,
author="de Moura, Leonardo
and Bj{\o}rner, Nikolaj",
editor="Armando, Alessandro
and Baumgartner, Peter
and Dowek, Gilles",
title="Deciding Effectively Propositional Logic Using DPLL and Substitution Sets",
booktitle="Automated Reasoning",
year="2008",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="410--425"
}

@inproceedings{2018efficientSATSampling,
author = {Dutra, Rafael and Laeufer, Kevin and Bachrach, Jonathan and Sen, Koushik},
title = {Efficient Sampling of SAT Solutions for Testing},
year = {2018},
isbn = {9781450356381},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3180155.3180248},
doi = {10.1145/3180155.3180248},
abstract = {In software and hardware testing, generating multiple inputs which satisfy a given set of constraints is an important problem with applications in fuzz testing and stimulus generation. However, it is a challenge to perform the sampling efficiently, while generating a diverse set of inputs which satisfy the constraints. We developed a new algorithm QuickSampler which requires a small number of solver calls to produce millions of samples which satisfy the constraints with high probability. We evaluate QuickSampler on large real-world benchmarks and show that it can produce unique valid solutions orders of magnitude faster than other state-of-the-art sampling tools, with a distribution which is reasonably close to uniform in practice.},
booktitle = {Proceedings of the 40th International Conference on Software Engineering},
pages = {549–559},
numpages = {11},
keywords = {sampling, constraint-based testing, constrained-random verification, stimulus generation},
location = {Gothenburg, Sweden},
series = {ICSE '18}
}
@inproceedings{2020koenigfirstorderquantsep,
author = {Koenig, Jason R. and Padon, Oded and Immerman, Neil and Aiken, Alex},
title = {First-Order Quantified Separators},
year = {2020},
isbn = {9781450376136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3385412.3386018},
doi = {10.1145/3385412.3386018},
abstract = {Quantified first-order formulas, often with quantifier alternations, are increasingly used in the verification of complex systems. While automated theorem provers for first-order logic are becoming more robust, invariant inference tools that handle quantifiers are currently restricted to purely universal formulas. We define and analyze first-order quantified separators and their application to inferring quantified invariants with alternations. A separator for a given set of positively and negatively labeled structures is a formula that is true on positive structures and false on negative structures. We investigate the problem of finding a separator from the class of formulas in prenex normal form with a bounded number of quantifiers and show this problem is NP-complete by reduction to and from SAT. We also give a practical separation algorithm, which we use to demonstrate the first invariant inference procedure able to infer invariants with quantifier alternations.},
booktitle = {Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {703–717},
numpages = {15},
keywords = {first-order logic, invariant inference},
location = {London, UK},
series = {PLDI 2020}
}
@article{1992burchsymbolic,
author = {Burch, J. R. and Clarke, E. M. and McMillan, K. L. and Dill, D. L. and Hwang, L. J.},
title = {Symbolic Model Checking: 10<sup>20</sup> States and Beyond},
year = {1992},
issue_date = {June 1992},
publisher = {Academic Press, Inc.},
address = {USA},
volume = {98},
number = {2},
issn = {0890-5401},
url = {https://doi.org/10.1016/0890-5401(92)90017-A},
doi = {10.1016/0890-5401(92)90017-A},
journal = {Inf. Comput.},
month = {jun},
pages = {142–170},
numpages = {29}
}
@article{1979Chvatalgreedysetcover,
author = {Chvatal, V.},
title = {A Greedy Heuristic for the Set-Covering Problem},
year = {1979},
issue_date = {August 1979},
publisher = {INFORMS},
address = {Linthicum, MD, USA},
volume = {4},
number = {3},
issn = {0364-765X},
url = {https://doi.org/10.1287/moor.4.3.233},
doi = {10.1287/moor.4.3.233},
abstract = {Let A be a binary matrix of size m \texttimes{} n, let cT be a positive row vector of length n and let e be the column vector, all of whose m components are ones. The set-covering problem is to minimize cTx subject to Ax ≥ e and x binary. We compare the value of the objective function at a feasible solution found by a simple greedy heuristic to the true optimum. It turns out that the ratio between the two grows at most logarithmically in the largest column sum of A. When all the components of cT are the same, our result reduces to a theorem established previously by Johnson and Lovasz.},
journal = {Math. Oper. Res.},
month = {aug},
pages = {233–235},
numpages = {3},
keywords = {evaluation of greedy heuristic, set covering, integer programming}
}
@book{clrsthirded,
  author    = {Thomas H. Cormen and
               Charles E. Leiserson and
               Ronald L. Rivest and
               Clifford Stein},
  title     = {Introduction to Algorithms, 3rd Edition},
  publisher = {{MIT} Press},
  year      = {2009},
  url       = {http://mitpress.mit.edu/books/introduction-algorithms},
  isbn      = {978-0-262-03384-8},
  timestamp = {Mon, 17 Aug 2020 11:36:12 +0200},
  biburl    = {https://dblp.org/rec/books/daglib/0023376.bib},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}
@Inbook{Karp1972,
author="Karp, Richard M.",
editor="Miller, Raymond E.
and Thatcher, James W.
and Bohlinger, Jean D.",
title="Reducibility among Combinatorial Problems",
bookTitle="Complexity of Computer Computations: Proceedings of a symposium on the Complexity of Computer Computations, held March 20--22, 1972, at the IBM Thomas J. Watson Research Center, Yorktown Heights, New York, and sponsored by the Office of Naval Research, Mathematics Program, IBM World Trade Corporation, and the IBM Research Mathematical Sciences Department",
year="1972",
publisher="Springer US",
address="Boston, MA",
pages="85--103",
isbn="978-1-4684-2001-2",
doi="10.1007/978-1-4684-2001-2_9",
url="https://doi.org/10.1007/978-1-4684-2001-2_9"
}
@article{wilcox2015verdi,
author = {Wilcox, James R. and Woos, Doug and Panchekha, Pavel and Tatlock, Zachary and Wang, Xi and Ernst, Michael D. and Anderson, Thomas},
title = {Verdi: A Framework for Implementing and Formally Verifying Distributed Systems},
year = {2015},
issue_date = {June 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {6},
issn = {0362-1340},
url = {https://doi.org/10.1145/2813885.2737958},
doi = {10.1145/2813885.2737958},
journal = {SIGPLAN Not.},
month = {jun},
pages = {357–368},
numpages = {12},
keywords = {Verdi, Formal verification, Coq, proof assistants, distributed systems}
}
@article{2019tlamadesymbolic,
author = {Konnov, Igor and Kukovec, Jure and Tran, Thanh-Hai},
title = {{TLA+ Model Checking Made Symbolic}},
year = {2019},
issue_date = {October 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {OOPSLA},
url = {https://doi.org/10.1145/3360549},
doi = {10.1145/3360549},
abstract = {TLA+ is a language for formal specification of all kinds of computer systems. System designers use this language to specify concurrent, distributed, and fault-tolerant protocols, which are traditionally presented in pseudo-code. TLA+ is extremely concise yet expressive: The language primitives include Booleans, integers, functions, tuples, records, sequences, and sets thereof, which can be also nested. This is probably why the only model checker for TLA+ (called TLC) relies on explicit enumeration of values and states.  In this paper, we present APALACHE -- a first symbolic model checker for TLA+. Like TLC, it assumes that all specification parameters are fixed and all states are finite structures. Unlike TLC, APALACHE translates the underlying transition relation into quantifier-free SMT constraints, which allows us to exploit the power of SMT solvers. Designing this translation is the central challenge that we address in this paper. Our experiments show that APALACHE outperforms TLC on examples with large state spaces.},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {123},
numpages = {30},
keywords = {Model checking, SMT, TLA+}
}
@article{Bradley2007CheckingSB,
  title={Checking Safety by Inductive Generalization of Counterexamples to Induction},
  author={Aaron R. Bradley and Zohar Manna},
  journal={Formal Methods in Computer Aided Design (FMCAD'07)},
  year={2007},
  pages={173-180}
}
@article{2017updr,
author = {Karbyshev, Aleksandr and Bj\o{}rner, Nikolaj and Itzhaky, Shachar and Rinetzky, Noam and Shoham, Sharon},
title = {Property-Directed Inference of Universal Invariants or Proving Their Absence},
year = {2017},
issue_date = {February 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {64},
number = {1},
issn = {0004-5411},
url = {https://doi.org/10.1145/3022187},
doi = {10.1145/3022187},
abstract = {We present Universal Property Directed Reachability (PDR∀), a property-directed semi-algorithm for automatic inference of invariants in a universal fragment of first-order logic. PDR∀ is an extension of Bradley’s PDR/IC3 algorithm for inference of propositional invariants. PDR∀ terminates when it discovers a concrete counterexample, infers an inductive universal invariant strong enough to establish the desired safety property, or finds a proof that such an invariant does not exist. PDR∀ is not guaranteed to terminate. However, we prove that under certain conditions, for example, when reasoning about programs manipulating singly linked lists, it does.We implemented an analyzer based on PDR∀ and applied it to a collection of list-manipulating programs. Our analyzer was able to automatically infer universal invariants strong enough to establish memory safety and certain functional correctness properties, show the absence of such invariants for certain natural programs and specifications, and detect bugs. All this without the need for user-supplied abstraction predicates.},
journal = {J. ACM},
month = {mar},
articleno = {7},
numpages = {33},
keywords = {property-directed reachability, EPR, PDR, IC3, Universal invariants}
}
@inproceedings{2020firstorderquantified,
author = {Koenig, Jason R. and Padon, Oded and Immerman, Neil and Aiken, Alex},
title = {First-Order Quantified Separators},
year = {2020},
isbn = {9781450376136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3385412.3386018},
doi = {10.1145/3385412.3386018},
abstract = {Quantified first-order formulas, often with quantifier alternations, are increasingly used in the verification of complex systems. While automated theorem provers for first-order logic are becoming more robust, invariant inference tools that handle quantifiers are currently restricted to purely universal formulas. We define and analyze first-order quantified separators and their application to inferring quantified invariants with alternations. A separator for a given set of positively and negatively labeled structures is a formula that is true on positive structures and false on negative structures. We investigate the problem of finding a separator from the class of formulas in prenex normal form with a bounded number of quantifiers and show this problem is NP-complete by reduction to and from SAT. We also give a practical separation algorithm, which we use to demonstrate the first invariant inference procedure able to infer invariants with quantifier alternations.},
booktitle = {Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {703–717},
numpages = {15},
keywords = {first-order logic, invariant inference},
location = {London, UK},
series = {PLDI 2020}
}
@InProceedings{2018accelsynsyninvs,
author="Fedyukovich, Grigory
and Bod{\'i}k, Rastislav",
editor="Beyer, Dirk
and Huisman, Marieke",
title="Accelerating Syntax-Guided Invariant Synthesis",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2018",
publisher="Springer International Publishing",
address="Cham",
pages="251--269",
abstract="We present a fast algorithm for syntax-guided synthesis of inductive invariants which combines enumerative learning with inductive-subset extraction, leverages counterexamples-to-induction and interpolation-based bounded proofs. It is a variant of a recently proposed probabilistic method, called FreqHorn, which is however less dependent on heuristics than its predecessor. We present an evaluation of the new algorithm on a large set of benchmarks and show that it exhibits a more predictable behavior than its predecessor, and it is competitive to the state-of-the-art invariant synthesizers based on Property Directed Reachability.",
isbn="978-3-319-89960-2"
}
@phdthesis{kuppe2017verified,
  title={A Verified and Scalable Hash Table for the TLC Model Checker: Towards an Order of Magnitude Speedup},
  author={Kuppe, Markus A},
  year={2017},
  school={Master’s thesis. University of Hamburg.}
}
@misc{mypyvyTool,
title = {mypyvy repository},
year = {2022},
howpublished = {\url{https://github.com/wilcoxjay/mypyvy}},
doi = {10.1145/3385412.3386018},
abstract = {Quantified first-order formulas, often with quantifier alternations, are increasingly used in the verification of complex systems. While automated theorem provers for first-order logic are becoming more robust, invariant inference tools that handle quantifiers are currently restricted to purely universal formulas. We define and analyze first-order quantified separators and their application to inferring quantified invariants with alternations. A separator for a given set of positively and negatively labeled structures is a formula that is true on positive structures and false on negative structures. We investigate the problem of finding a separator from the class of formulas in prenex normal form with a bounded number of quantifiers and show this problem is NP-complete by reduction to and from SAT. We also give a practical separation algorithm, which we use to demonstrate the first invariant inference procedure able to infer invariants with quantifier alternations.},
booktitle = {Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {703–717},
numpages = {15},
keywords = {first-order logic, invariant inference},
location = {London, UK},
series = {PLDI 2020}
}
@book{sipser2015,
author = {Sipser, Michael},
title = {Introduction to the Theory of Computation},
year = {1996},
isbn = {053494728X},
publisher = {International Thomson Publishing},
edition = {1st},
abstract = {From the Publisher:Michael Sipser's philosophy in writing this book is simple: make the subject interesting and relevant, and the students will learn. His emphasis on unifying computer science theory - rather than offering a collection of low-level details - sets the book apart, as do his intuitive explanations. Throughout the book, Sipser - a noted authority on the theory of computation - builds students' knowledge of conceptual tools used in computer science, the aesthetic sense they need to create elegant systems, and the ability to think through problems on their own. INTRODUCTION TO THE THEORY OF COMPUTATION provides a mathematical treatment of computation theory grounded in theorems and proofs. Proofs are presented with a "proof idea" component to reveal the concepts underpinning the formalism. Algorithms are presented using prose instead of pseudocode to focus attention on the algorithms themselves, rather than on specific computational models. Topic coverage, terminology, and order of presentation are traditional for an upper-level course in computer science theory. Users of the Preliminary Edition (now out of print) will be interested to note several new chapters on complexity theory: Chapter 8 on space complexity; Chapter 9 on provable intractability, and Chapter 10 on advanced topics, including approximation algorithms, alternation, interactive proof systems, cryptography, and parallel computing.}
}
@book{2021Ebbinghaus,
abstract = {This textbook introduces first-order logic and its role in the foundations of mathematics by examining fundamental questions. What is a mathematical proof? How can mathematical proofs be justified? Are there limitations to provability? To what extent can machines carry out mathematical proofs? In answering these questions, this textbook explores the capabilities and limitations of algorithms and proof methods in mathematics and computer science. The chapters are carefully organized, featuring complete proofs and numerous examples throughout. Beginning with motivating examples, the book goes on to present the syntax and semantics of first-order logic. After providing a sequent calculus for this logic, a Henkin-type proof of the completeness theorem is given. These introductory chapters prepare the reader for the advanced topics that follow, such as Gödel's Incompleteness Theorems, Trakhtenbrot's undecidability theorem, Lindström's theorems on the maximality of first-order logic, and results linking logic with automata theory. This new edition features many modernizations, as well as two additional important results: The decidability of Presburger arithmetic, and the decidability of the weak monadic theory of the successor function. Mathematical Logic is ideal for students beginning their studies in logic and the foundations of mathematics. Although the primary audience for this textbook will be graduate students or advanced undergraduates in mathematics or computer science, in fact the book has few formal prerequisites. It demands of the reader only mathematical maturity and experience with basic abstract structures, such as those encountered in discrete mathematics or algebra.},
author = {Ebbinghaus, Heinz-Dieter},
address = {Cham, Switzerland},
edition = {Third edition.},
isbn = {9783030738396},
keywords = {Logic, Symbolic and mathematical},
language = {eng},
publisher = {Springer},
series = {Graduate texts in mathematics},
title = {Mathematical logic},
year = {2021},
}
@inbook{2021benari,
author = {Ben-Ari, M.},
address = {London},
edition = {3rd ed.},
isbn = {9781447141297},
keywords = {Logic, Symbolic and mathematical},
language = {eng},
publisher = {Springer},
title = {Mathematical logic for computer science},
year = {2012},
chapter={7},
}
@inproceedings{Dreben1979TheDP,
  title={The decision problem: Solvable classes of quantificational formulas},
  author={Burton Dreben and Warren D. Goldfarb},
  year={1979}
}
@article{lewis1980complexity,
  title={{Complexity results for classes of quantificational formulas}},
  author={Lewis, Harry R},
  journal={Journal of Computer and System Sciences},
  volume={21},
  number={3},
  pages={317--353},
  year={1980},
  publisher={Elsevier}
}
@techreport{demoura2008deciding,
author = {de Moura, Leonardo and Piskac, Ruzica and Bjørner, Nikolaj},
title = {{Deciding Effectively Propositional Logic using DPLL and Substitution Sets}},
year = {2008},
month = {August},
abstract = {We introduce a DPLL calculus that is a decision procedure for the Bernays-Schoenfinkel class, also known as EPR. Our calculus allows combining techniques for efficient propositional search with data-structures, such as Binary Decision Diagrams, that can efficiently and succinctly encode finite sets of substitutions and operations on these. In the calculus, clauses comprise of a sequence of literals together with a finite set of substitutions; truth assignments are also represented using substitution sets. The calculus works directly at the level of sets, and admits performing simultaneous constraint propagation and decisions, resulting in potentially exponential speedups over existing approaches.},
publisher = {Springer-Verlag},
url = {https://www.microsoft.com/en-us/research/publication/deciding-effectively-propositional-logic-using-dpll-and-substitution-sets/},
pages = {21},
number = {MSR-TR-2008-104},
}
@InProceedings{2016merzmanysorted,
author="Merz, Stephan
and Vanzetto, Hern{\'a}n",
editor="Butler, Michael
and Schewe, Klaus-Dieter
and Mashkoor, Atif
and Biro, Miklos",
title="Encoding TLA+ into Many-Sorted First-Order Logic",
booktitle="Abstract State Machines, Alloy, B, TLA, VDM, and Z",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="54--69",
isbn="978-3-319-33600-8"
}
@InProceedings{2007decidablefragmentsmanysorted,
author="Abadi, Aharon
and Rabinovich, Alexander
and Sagiv, Mooly",
editor="Dershowitz, Nachum
and Voronkov, Andrei",
title="Decidable Fragments of Many-Sorted Logic",
booktitle="Logic for Programming, Artificial Intelligence, and Reasoning",
year="2007",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="17--31",
abstract="We investigate the possibility of developing a decidable logic which allows expressing a large variety of real world specifications. The idea is to define a decidable subset of many-sorted (typed) first- order logic. The motivation is that types simplify the complexity of mixed quantifiers when they quantify over different types. We noticed that many real world verification problems can be formalized by quantifying over different types in such a way that the relations between types remain simple.",
isbn="978-3-540-75560-9"
}
@InProceedings{2020ivymultimodal,
author="McMillan, Kenneth L.
and Padon, Oded",
editor="Lahiri, Shuvendu K.
and Wang, Chao",
title="Ivy: A Multi-modal Verification Tool for Distributed Algorithms",
booktitle="Computer Aided Verification",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="190--202",
abstract="Ivy is a multi-modal verification tool for correct design and implementation of distributed protocols and algorithms, supporting modular specification, implementation and proof. Ivy supports proving safety and liveness properties of parameterized and infinite-state systems via three modes: deductive verification using an SMT solver, abstraction and model checking, and manual proofs using natural deduction. It supports light-weight formal methods via compositional specification-based testing and bounded model checking. Ivy can extract executable distributed programs by translation to efficient C++ code. It is designed to support decidable automated reasoning, to improve proof stability and to provide transparency in the case of proof failures. For this purpose, it presents concrete finite counterexamples, automatically audits proofs for decidability of verification conditions, and provides modular hiding of theories.",
isbn="978-3-030-53291-8"
}
@InProceedings{2009completeinstant,
author="Ge, Yeting
and de Moura, Leonardo",
editor="Bouajjani, Ahmed
and Maler, Oded",
title="Complete Instantiation for Quantified Formulas in Satisfiabiliby Modulo Theories",
booktitle="Computer Aided Verification",
year="2009",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="306--320",
abstract="Quantifier reasoning in Satisfiability Modulo Theories (SMT) is a long-standing challenge. The practical method employed in modern SMT solvers is to instantiate quantified formulas based on heuristics, which is not refutationally complete even for pure first-order logic. We present several decidable fragments of first order logic modulo theories. We show how to construct models for satisfiable formulas in these fragments. For richer undecidable fragments, we discuss conditions under which our procedure is refutationally complete. We also describe useful heuristics based on model checking for prioritizing or avoiding instantiations.",
isbn="978-3-642-02658-4"
}
@misc{2014manysortedlogic,
title="Many-sorted logic",
author="Jouko Vaananen",
year="2014",
url={http://www.math.helsinki.fi/logic/opetus/msl/ILLC_MSL_2014.1.pdf},
howpublished={\url{http://www.math.helsinki.fi/logic/opetus/msl/ILLC_MSL_2014.1.pdf}},
}
@article{1986kozen,
author = {Apt, K R and Kozen, D C},
title = {Limits for Automatic Verification of Finite-State Concurrent Systems},
year = {1986},
issue_date = {May 30,1986},
publisher = {Elsevier North-Holland, Inc.},
address = {USA},
volume = {22},
number = {6},
issn = {0020-0190},
url = {https://doi.org/10.1016/0020-0190(86)90071-2},
doi = {10.1016/0020-0190(86)90071-2},
journal = {Inf. Process. Lett.},
month = {may},
pages = {307–309},
numpages = {3}
}
@article{1997clarkenetwork,
author = {Clarke, E. M. and Grumberg, O. and Jha, S.},
title = {Verifying Parameterized Networks},
year = {1997},
issue_date = {Sept. 1997},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {19},
number = {5},
issn = {0164-0925},
url = {https://doi.org/10.1145/265943.265960},
doi = {10.1145/265943.265960},
abstract = {This article describes a technique based on network grammars and abstraction to verify families of state-transition systems. The family of state-transition systems is represented by a context-free network grammar. Using the structure of the network grammar our technique constructs a process invariant that simulates all the state-transition systems in the family. A novel idea introduced in this article is the use of regular languages to express state properties. We have implemented our techniques and verified two nontrivial examples.},
journal = {ACM Trans. Program. Lang. Syst.},
month = {sep},
pages = {726–750},
numpages = {25},
keywords = {parameterized systems, temporal logic, model checking, process invariants}
}
